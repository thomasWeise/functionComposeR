% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compose.R
\name{function.compose}
\alias{function.compose}
\title{Concatenate Two Functions}
\usage{
function.compose(f, g, f2g = "x")
}
\arguments{
\item{f}{the inner function}

\item{g}{the outer function}

\item{f2g}{the argument of \code{g} to be replaced with the return value of \code{f}}
}
\description{
Try to find a small and efficient representation of the
concatenation of to functions \code{f} and \code{g} such that the resulting
function has the form \code{h(...)=g(...,f(...),...)} (where \code{...} stands
for an arbitrary numer of arguments, not the \code{R}-style dots).

More precisely: The input are two functions \code{f} and \code{g} and a
"bridge argument" \code{f2g}. Both functions may have an arbirary argument
list, say \code{f(x,y,z=7,c)} and \code{g(a=3,b=4,c)}. The "bridge argument"
can be any parameter of \code{g}, let's say \code{b}. The result of
\code{function.compose(f, g, f2g="b")} will then be a function
\code{h(a=3,c,x,y,z=7)} which is equivalent to \code{g(a, f(x, y, z, c), c)}.

Since we also canonicalize all functions (\code{f}, \code{g}, and \code{h})
involved, this means also that we attempt to substitute all potentially
substitutable variables and simplify the inner expressions as much as
possible.

This is particularly useful when iteratively composing functions and wanting
to retain their readability and making the result as fast to execute as
possible. However, the behavior may be undefined if the parameters of the
function can be resolved as constant values in the current environment or
if functions with otherwise odd parameters are successfively composed.

If the result of \code{f} is used exactly once in \code{g}, we substitute
the body of \code{f} into \code{g} to directly replace the bridge parameter.
If it is used more than once, we first shovel its result into a variable,
namely the bridge parameter.
}
\examples{
f<-function(x,y,z=7,c) { x+23*y-z+2+c }
g<-function(a=3,b=4,c) { a*b - b*c }
function.compose(f, g, f2g="b")
# function (a = 3, c, x, y, z = 7)
# {
#   b <- x + 23 * y - z + 2 + c
#   a * b - b * c
# }
function.compose(sin, cos, f2g="x")
# function (x)
# cos(x = sin(x = x))
k <- 23
f2 <- function(x) { k*5 + x }
g2 <- function(x) { x/(k - sin(k)) }
function.compose(f2, g2)
# function (x)
# (115 + x)/23.8462204041752
}
