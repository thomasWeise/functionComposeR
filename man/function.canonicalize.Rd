% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/canonicalize.R
\name{function.canonicalize}
\alias{function.canonicalize}
\title{Canonicalize a Function}
\usage{
function.canonicalize(f)
}
\arguments{
\item{f}{the function}
}
\value{
the canonicalized function
}
\description{
\code{function.canonicalize(f)} tries to generate a canonical and
compact version of the function \code{f}. It therefore tries to substitute
all variables in the body of \code{f} with their value if the value is known
and then tries to evaluate all sub-expressions whose results will be
constant. In other words, the promises, variables, and expressions inside a
function \code{f} are evaluated and replaced with constant values where
possible.

We make use of the functions \code{\link{unenclose}},
\code{\link{modify_lang}}, and \code{\link{substitute_q}}   of
the package \code{pryr}, the function \code{\link{substituteDirect}}
of the package \code{methods} and also of the ideas given by by
\code{schloerke} (\url{http://github.com/schloerke}) at
\url{http://github.com/hadley/pryr/issues/43}. We also apply
\code{\link{expression.simplify}} to take care of the
partial resolution of the function body.

These measures are intented to produce a version of a function \code{f} which
is both human-readable and as fast to evaluate as possible. The new function
will reside in the same environment as \code{f}.
}
\examples{
f <- function(x) { 5+3+x }
function.canonicalize(f)
# function (x)
# 8 + x
z <- 24;
g <- function(x) { tan(sin(z) + (z*27) / x) }
function.canonicalize(g)
# function (x)
# tan(-0.905578362006624 + 648/x)
}
